Неделя 21


Вопросы


1. Приведите примеры GET-вызовов с параметрами (2-3 возможных адреса URL, можно реальных, можно из головы)?

https://oz.by/search/?q=книга+детская – выбирает детскую книгу

https://www.21vek.by/search/?term=пылесос&category_id=3&sa=&price_min=26.001&price_max=4250&filter=Bosch
- выбирает пылесос производителя bosch (в автоматическом диапазоне цен от 26 до 4200 byn)


2. Расскажите своими словами, чем отличаются GET и POST-запросы?

GET передает данные в URL через ссылку. Мы можем явно видеть запрос: например, при поиске в каталоге интернет-магазина товара «книга детская» эти данные отображаются в ссылке, 
они никак не защищены.

POST передает данные в теле запроса протокола HTTP, который спрятан от глаз. Например, во время регистрации при отправке формы содержание этой формы будет спрятано в теле запроса, 
а в URL ничего не отобразится. 

Следовательно, GET – для безопасных запросов (как фильтры в интернет-магазине), а POST – для приватной информации (формы с паролями, банковскими реквизитами, персональными данными).


3. Какой вид запроса лучше использовать для получения отфильтрованного списка товаров?

GET


4. А какой - для формы регистрации?

POST


5. Посмотрите на запрос и разберитесь, что он делает и что означают и на что влияют параметры api_key, q, limit, lang? Как сделать так, чтобы запрос возвращал не 25, а 5 картинок? 

https://api.giphy.com/v1/gifs/search?api_key=SET_KEY_HERE&q=cats&limit=25&offset=0&rating=g&lang=en
Это GET- запрос, который обращается к серверу, чтобы получить картинки:
api_key – это индивидуальный ключ (получается при регистрации),
q – значение, которое вводит пользователь для поиска (cats),
limit – количество картинок по запросу (25),
lang – язык (английский).

Чтобы запрос возвращал 5 картинок, нужно изменить параметр limit на 5.


6. Как посмотреть заголовки запроса к странице или API?

С помощью инструментов разработчика DevTools и вкладки Network => Headers.


7. Самостоятельно разберитесь, что такое CORS. Приведите пример их включения в запросе fetch.

CORS (Cross-Origin Resource Sharing) - совместное использование ресурсов между разными источниками. 

В целях безопасности браузеры ограничивают cross-origin запросы. Например, Fetch API следует политике одного источника: web-приложения, использующие такие API, 
могут запрашивать HTTP-ресурсы только с того домена, с которого были загружены, пока не будут использованы специальные CORS-заголовки.

Механизм CORS поддерживает кросс-доменные запросы и передачу данных между браузером и web-серверами по защищённому соединению. Современные браузеры используют CORS в API-контейнерах 
(например, Fetch), чтобы снизить риски, присущие запросам с других источников.

CORS-запросы делятся на простые и сложные. Для простых не требуется предварительный метод OPTIONS, запрос сразу идет на сервер. К простым запросам относятся: 
методы GET/POST/HEAD c content-type text/plain, application/x-www-form-urlencoded, multipart/form-data.

Любой другой запрос считается «непростым». Браузер не делает «непростые» запросы сразу. Перед этим он посылает предварительный запрос, спрашивая разрешения. 
Предварительный запрос использует метод OPTIONS.

Пример включения CORS в запросе fetch

a. Создается запрос на другой источник:

let response = await fetch('https://site.com/service.json', {
  method: 'PATCH',
  headers: {
    'Content-Type': 'application/json',
    'API-Key': 'secret'
  }
});

b. Этот запрос не является простым, значит браузер посылает предзапрос:

OPTIONS /service.json
Host: site.com
Origin: https://javascript.info
Access-Control-Request-Method: PATCH
Access-Control-Request-Headers: Content-Type,API-Key

Сервер должен ответить со статусом 200 и заголовками:
Access-Control-Allow-Methods: PATCH
Access-Control-Allow-Headers: Content-Type,API-Key.

Предзапрос осуществляется невидимо для JavaScript. JS получает только ответ на основной запрос или ошибку, если со стороны сервера нет разрешения.
	
c. Если предзапрос успешен, браузер делает основной запрос по алгоритму простых запросов. Основной запрос имеет заголовок Origin:

PATCH /service.json
Host: site.com
Content-Type: application/json
API-Key: secret
Origin: https://javascript.info



8. Что можно писать в параметре заголовков Content-Type ?

Этот заголовок указывает тип документа. Затем браузер определяет, как интерпретировать содержимое на основании этого. Например, страница html может возвращать такую информацию:

Content-Type: text/html; charset=UTF-8

"text" - это тип, а "html" - подтип документа. Заголовок также может содержать больше информации, такой как charset.

Самые распространенные типы:
application/x-www-form-urlencoded 
multipart/form-data  
text/plain 
application/json 


9. Давайте отправим информацию о собачке в API по адресу localhost/pets/add

JSON с информацией о собаке:
{
		"breed": "Beagle",
		"size": "large",
		"color": "orange",
		"age": 6
	}

Как будет выглядеть fetch в таком случае?

https://localhost/pets/add?breed=Beagle&size=large&color=orange&age=6


10. Изучите статью https://learn.javascript.ru/promise-basics и самостоятельно разберитесь, что такое промисы. Напишите в 1-2 предложения, что это такое и приведите пример, 
где вы уже сталкивались с промисами?  

Promise («промис») – это специальный объект в JavaScript. Промисы позволяют делать вещи в естественном порядке, они призваны упростить работу с асинхронными операциями. 
Это определенная «обертка» над асинхронностью, которая добавляет удобства для написания кода.

Мы уже сталкивались с промисами при написании запроса с помощью fetch.

Промисы создаются с помощью конструкции new Promise, в которую передается функция-исполнитель с аргументами resolve и reject (колбэками). Также промисы имеют методы 
then, catch и finally. Синтаксис:

let promise = new Promise(function(resolve, reject) {
  // код
});

Пример промисов:
let promise = new Promise(resolve => {
  setTimeout(() => resolve("Готово!"), 3000);
});
promise.then(alert); // выведет "Готово!" спустя 3 секунды

Основное преимущество промисов перед колбэками: промисы позволяют не создавать колбэки внутри колбэков.







Практическое задание


1. Сделайте форму поиска по GIF-кам к открытому API [https://developers.giphy.com/](https://developers.giphy.com/). Используйте GET-запрос с параметрами в строке адреса. 
Страница должна выводить не более 5 картинок одновременно.
(папка gif)

2. Найдите форму регистрации с валидацией (задание 2 недели 18) или сверстай новую. При нажатии на кнопку “Отправить” отправляй данные формы в формате JSON 
на сайт https://httpbin.org/post через POST запрос. 
(папка registration)

3. Найдите форму владельцев котиков (задание 1 недели 18) или сверстай новую. При нажатии на кнопку “Отправить” отправляй данные формы через объект FormData 
на сайт https://httpbin.org/post через POST запрос. 
(папка cats)