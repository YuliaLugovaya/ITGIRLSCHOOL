Неделя 14


Вопросы


1. Какие есть способы объявления функций?

a. Function Declaration – это основной способ, при котором функция объявляется отдельной конструкцией «function…» в основном потоке кода.
function sum(a, b) {
  return a + b;
}
b. Function Expression – это способ, при котором функция создается внутри другого выражения или синтаксической конструкции.
let sum = function(a, b) {
  return a + b;
};
c. Стрелочные функции - самый новый способ с более простым и кратким синтаксисом для создания функций. Удобны для простых однострочных действий, когда лень писать много букв.
let sum = (a, b) => a + b;


2. Приведите примеры вызова одной и той же функции всеми известными вам способами.

a. Function Declaration 
function showMessage() {
    let person = prompt("Как тебя зовут?");
    alert(`Привет, ${person}!`);
}

b. Function Expression
let showMessage = function() {
  let person = prompt("Как тебя зовут?");
  alert(`Привет, ${person}!`);
}

c. Стрелочная функция 
let showMessage = () => {
  let person = prompt("Как тебя зовут?");
  alert(`Привет, ${person}!`);
}


3. В чем разница между тестированием и отладкой (дебаггингом)? А что такое логирование?

Тестирование – это испытание программы, его цель заключается в выявлении имеющихся в программе ошибок. Может быть ручным (когда мы код проверяем вручную) или с помощью специальных программ.

Отладка же (дебаггинг) - это выявление ошибок и устранение их причин с помощью инструментов отладки.

Логирование применяется, если нужно что-то вывести в консоль из кода. Для этого применяется функция console.log. Если правильно выстроить логирование, то можно и без дебаггинга 
разобраться, что происходит в коде.


4. В чем разница между Function Expression и Function Declaration?

a. Разный синтаксис: 
- при Function Declaration функция объявляется отдельной конструкцией в основном потоке кода;
- при Function Expression функция создается внутри другого выражения или синтаксической конструкции. 

b. Функция создаётся движком JavaScript в разный момент:

- Function Declaration можно использовать во всем скрипте (или блоке кода). Когда движок JavaScript готовится выполнять скрипт или блок кода, прежде всего он ищет в нём 
Function Declaration и создаёт все такие функции. После того, как все объявления Function Declaration будут обработаны, продолжится выполнение. Функции, созданные, 
как Function Declaration могут быть вызваны раньше своих определений.

- Function Expression создаётся, когда выполнение доходит до него, и затем может использоваться. Когда поток выполнения достигнет правой части выражения присваивания - 
let showMessage = function(), функция считается созданной и может быть использована (присвоена переменной, вызвана и т.д.).


5. Что делает функция console.log()?

Функция console.log() нужна для того, чтобы увидеть промежуточный результат при написании скриптов прямо в консоли браузера. console.log() отражает любой объект в консоли в удобном виде. 
Если это примитив - то его значением, если объект - его древовидной формой. DOM-элемент можно также раскрыть и увидеть, что внутри. 

Например,
console.log('hello')
выведет в консоли hello


6. Что такое BOM и DOM?

a. BOM – это объектная модель браузера (Browser Object Model), дополнительные объекты, предоставляемые браузером (окружением), чтобы работать со всем, кроме документа. Например, 
объект location позволяет получить текущий URL и перенаправить браузер по новому адресу:

alert(location.href); 
if (confirm("Перейти в Google?")) {
  location.href = "https://google.com"; 
}

Функции alert, confirm и prompt тоже являются частью BOM. Они не относятся прямо к странице, но представляют собой методы объекта окна браузера для коммуникации с пользователем.

b. DOM – это объектная модель документа (Document Object Model), которая представляет все содержимое страницы в виде объектов, которые можно менять. Это также представление 
HTML-документа в виде дерева тегов, где каждый узел этого дерева – объект. Все объекты доступны при помощи JavaScript, мы можем использовать их для изменения страницы.

Теги html являются узлами-элементами. Они образуют структуру дерева: <html> – это корневой узел, <head> и <body> его дочерние узлы и т.д. Текст внутри элементов образует 
текстовые узлы, обозначенные как `#text`. У него не может быть потомков, т.е. он находится всегда на самом нижнем уровне.

Объект document – основная «входная точка». С его помощью мы можем что-то создавать или менять на странице. Например:
document.getElementById('result').innerHTML = result;
// перезапишет в узел с id=’result’ новое значение, заданное с помощью переменной result

Лучший способ исследовать DOM – это использовать инструменты разработчика браузера. Это то, что мы каждый день делаем при разработке.


7. Есть вот такая страница:

<!DOCTYPE HTML>
<html>

<body>
	<form name="search">
		<label>Поиск:
			<input type="text" name="search"> </label>
		<input type="submit" value="Search!"> </form>
	<hr>
	<form name="search-person">Поиск по посетителям:
		<table id="age-table">
			<tr>
				<td>Возраст:</td>
				<td id="age-list">
					<label>
						<input type="radio" name="age" value="young">до 18</label>
					<label>
						<input type="radio" name="age" value="mature">18-50</label>
					<label>
						<input type="radio" name="age" value="senior">старше 50</label>
				</td>
			</tr>
			<tr>
				<td>Дополнительно:</td>
				<td>
					<input type="text" name="info">
					<input type="text" name="info">
					<input type="text" name="info"> </td>
			</tr>
		</table>
		<input type="button" value="Search!"> </form>
</body>

</html>

Как найти в ней?…

a. Таблицу с id="age-table"
Ответ:

let table = document.querySelector(' #age-table ');

b. Все элементы label внутри этой таблицы (их три)
Ответ:

let label = document.querySelectorAll ('#age-table label');

c. Форму form с именем name="search-person"
Ответ:
let form = document.querySelectorAll(' form[name="search-person"]');


8. Как сделать переход на другую страницу при клике на кнопку (без <a href=...>, только средствами JavaScript)?

Использовать объект location, который позволяет перенаправить браузер по новому адресу. Например:

HTML:
<button onclick="goTo()">Нажми меня</button>

JS:
function goTo(){
  document.location='https://www.google.com/'; 
}


9. Как можно обнулить (очистить) значение внутри input?

Это можно сделать, например, прописав в новой функции для value пустое значение. В практическом задании я сделала обнуление для калькулятора при помощи кнопки Сбросить значения.


10. Как будет выглядеть ваша функция приветствия из прошлого домашнего задания, если ее переписать в стрелочном формате?

Код прописан в практическом задании (я адаптировала под тему этой недели):

let showMessage = () => {
  let person;
  let output;

  person = document.getElementById('person').value;
  
  if (person) {
    output = `Привет, ${person}!`;
  } else {
    output = 'Привет, Гость!';
  }

  document.getElementById('out').innerHTML = output;
}



Практическое задание


1. Перепишите домашнее задание прошлой недели c помощью input для ввода данных и div (либо input) для вывода результата (в коде script.js - //greeting message и //calculator)

2. Напишите скрипт, который меняет фон div-ов по клику на них (в коде script.js - //color-blocks, меняет дивы с приветственным сообщением и калькулятором)

3. Напишите простую галерею на 2+ картинки с кнопками Вперед и Назад (в коде script.js - //gallery)
- задания недели 14 (week_14) я сделала в одном проекте, они находятся в папке greeting_calculator_color-block_gallery.

4. Воспользовавшись дебаггером, пройдите по шагам все практическое домашнее задание. Если что-то не работает, попытайтесь понять, почему.
- выполнила.