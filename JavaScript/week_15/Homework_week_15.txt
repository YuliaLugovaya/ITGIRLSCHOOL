Неделя 15


Вопросы


1. Сколько есть видов условных операторов?

a. условный оператор if (с одной ветвью)
Состоит из:
- ключевого слова if;
- условия (выражения в круглых скобках), которое должно равняться true или false;
- действия, которые нужно выполнить, если условие является true.

if(age >= 16){ 
	alert("Спасибо за регистрацию!");
}

b. условный оператор if...else (с двумя ветвями);
if...else используется, когда необходимо при истинности условия выполнить одни действия, а при ложности - другие.

if(age >= 16){ 
	alert("Спасибо за регистрацию!");
} else {
	alert("Регистрация возможна при достижении возраста 16 лет.");
}

c. условный оператор else if... (с несколькими ветвями);
else if... используется, когда необходимо применить больше одного условия.

if(age >= 16){ 
	alert("Спасибо за регистрацию!");
} else if (age >= 14){
	alert("Регистрация возможна при достижении возраста 16 лет.");
} else {
	alert("Для самых маленьких у нас есть сайт со сказками");
}

d. тернарный оператор (?:);
Можно использовать, когда необходимо в зависимости от условия выполнить одно из двух заданных выражений.
(age >= 16) ? alert( " Спасибо за регистрацию!" ) : alert("Регистрация возможна при достижении возраста 16 лет." );

e. оператор выбора switch.
Оператор switch предназначен для выполнения одного варианта инструкций из нескольких в зависимости от значения выражения. Выбор того или иного варианта определяется посредством 
строгого равенства результата выражения значению случая (case).
Инструкция break является необязательной. Она предназначена для прерывания выполнения оператора switch и передачи управлению инструкции, идущей после него. Пример:

let a = 2 + 2;

switch (a) {
  case 3:
    alert( 'Маловато' );
    break;
  case 4:
    alert( 'В точку!' );
    break;
  case 5:
    alert( 'Перебор' );
    break;
  default:
    alert( "Нет таких значений" );
}


2. Перепишите пример про определение времени суток через тернарный оператор
let date = new Date();
let time = date.getHours();

if (time < 10) {
  alert( "Доброе утро!" );
} else {
  alert( "Добрый день!" );
}

Ответ:
let date = new Date();
let time = date.getHours();

(time < 10) ? alert( "Доброе утро!" ) : alert( "Добрый день!" );


3. Выведется ли alert?
if ("0") {
  alert( 'Привет' );
}

Ответ:
Да, выведется, потому что “0” – это не пустая строка, а значит – true. 


4. Чему будет равно условие (правда или ложь) в этих случаях, если x = 6 and y = 3?
    (x < 10 && y > 1) *логическое И*         // ответ - true
    (x == 5 || y == 5) *логическое ИЛИ*      // ответ – false
    !(x == y) *логическое НЕ*                // ответ – true


5. Назовите три способа назначения обработчиков событий. Какой из них самый универсальный?

a. назначить обработчика в разметке - в атрибуте, который называется on<событие>.
<input value="Нажать кнопку" onclick="alert('Вы нажали кнопку')" type="button">

b. использовать свойство DOM-элемента on<событие>.

HTML
<input class="button" type="button" value="Нажать кнопку">

JS
let button = document.querySelector(".button");
button.onclick = function() {
    alert('Вы нажали кнопку');
  };

либо

button.onclick = clickMe;
function clickMe() {
    alert('Вы нажали кнопку');
  };

c. при помощи метода addEventListener. Данный метод свободен от недостатка, который есть у описанных выше способов назначения обработчика – невозможность повесить несколько 
обработчиков на одно событие. Поэтому этот метод считается более универсальным.
Синтаксис добавления addEventListener:

function clickMe() {
    alert('Вы нажали кнопку');
  };

let button = document.querySelector(".button");
button.addEventListener(‘click’, clickMe);

//event - имя события ("click").
//handler - ссылка на функцию-обработчик (clickMe).
//[options] - дополнительный объект со свойствами


6. Корректна ли такая запись? button.onclick = hello();

Нет, не корректна. Если добавить скобки, то hello() – это уже вызов функции, результат которого будет присвоен onclick. 

Верными будут следующие варианты:

HTML
<input type="button" id="elem" value="Нажать кнопку">

JS
let button = document.querySelector('#elem');

button.onclick = hello;
function hello() {
    //тело функции
  };

либо

button.onclick = function() {
    //тело функции
  };

Скобки же нужны при добавлении обработчика в разметку:

HTML
<input type="button" id="elem" value="Нажать кнопку" onclick="hello()">

JS
function hello() {
  alert('Hello');
  };


7. Какие есть события у клавиатуры?

События keydown и keyup.
keydown происходит при нажатии клавиши, а keyup – при отпускании.

У данных событий есть свойства event.code и event.key.
event.code уточняет, какая именно из клавиш была нажата, в то время как event.key сообщает о «смысле» клавиши: что вообще было нажато.


8. Что такое объект события и какие у него могут быть свойства?

Объект события создается браузером, когда происходит какое-то событие. Браузер записывает в объект детали и передаёт его в качестве аргумента функции-обработчику.

Некоторые свойства объектов.

Объект события event:
- type - тип события, в данном случае (например, click).
- currentTarget - элемент, на котором сработал обработчик (тот, на котором «висит» конкретный обработчик). 
- target - самый глубокий элемент, на котором произошло событие, содержит ссылку на конкретный элемент внутри формы, на котором произошёл клик.
- bubbles – логическое значение, указывающее на то является ли данное событие всплывающим;
- timestamp – время, когда произошло событие 
и другие.

Свойства объекта события при click, dblclick, mousedown и mouseup (события мыши):
- clientX и clientY - координаты курсора в момент клика относительно окна (левого верхнего угла viewport);
- pageX и pageY – координаты клика относительно левого верхнего угла отображаемой страницы;
- which – число, сообщающее о том, какая кнопка мыши была нажата (1 - левая кнопка, 2 - средняя кнопка, 3 - правая кнопка)
и другие.

Свойства объекта события KeyboardEvent (взаимодействия пользователя с клавиатурой):
- code – физической код клавиши на клавиатуре;
- key – значение символа нажатой клавиши;
- location – возвращает число, сообщающее о расположении клавиши на клавиатуре
и другие.


9. Самостоятельно разберитесь, какие бывают операторы сравнения? Напишите сюда как выглядят сравнение "равно", "не равно", "больше чем".

Операторы сравнения возвращают значения логического типа. Строки сравниваются посимвольно в лексикографическом порядке. Значения разных типов при сравнении приводятся к числу 
(исключением является сравнение с помощью операторов строгого равенства/неравенства).

Операторы сравнения в JavaScript записываются так:

Больше/меньше: a > b, a < b.
Больше/меньше или равно: a >= b, a <= b.
Равно: a == b. 
Строгое равенство: a === b (проверяет равенство без приведения типов).
Не равно: a != b.
Строгое неравенство: a !== b



Практическое задание


1. Доработайте калькулятор из прошлых заданий, выдавая сообщение "На ноль делить нельзя!" пользователю, если он пытается поделить на 0 (в script.js - //calculator)

2. Сделайте красивую форму регистрации из любого используемого вами сервиса (минимум 5 полей ввода), например, регистрация в Яндексе, Гугле или на любом другом сайте. 
Если какое-то из полей не заполнено или заполнено неверно, выводите сообщение об ошибке. Условия проверки для каждого поля придумайте самостоятельно. Если все заполнено верно, 
то выведите "Добро пожаловать, имя пользователя!" (в script.js - //form)

3. Сделайте страничку с возможность выбора темы из выпадающего списка (например, темная, белая, синяя). После выбора темы меняйте фон документа согласно выбранному цвету 
(в script.js - //themes)
- задания недели 15 (week_15) я сделала в одном проекте, они находятся в папке calculator_themes_form.