Неделя 20


Вопросы


1. Напишите JSON к вашим ответам на вопрос 2 из прошлой недели (минимум 3 примера):

Семья
let jsonFamily = `[{
    "relative": "брат",
    "name": "Иван",
    "age": "24",
    "height": "185",
    "weight": "80"
},{
    "relative": "сестра",
    "name": "Марья",
    "age": "18",
    "height": "165",
    "weight": "50"
},{
    "relative": "дядя",
    "name": "Василий",
    "age": "57",
    "height": "185",
    "weight": "90"
}]`;

Форма обратной связи
let jsonForm = `[{
    "name": "Иван",
    "email": "ivan@gmail.com",
    "text": "Спасибо, вы супер!",
    "data": "23.12.2022"
},{
    "name": "Марья",
    "email": "maria@gmail.com",
    "text": "Сотрудники отзывчивые!",
    "data": "25.12.2022"
},{
    "name": "Василий",
    "email": "57",
    "text": "Хороший сервис",
    "data": "30.12.2022"
}]`;

Персонажи компьютерной игры
let jsonGame = `[{
    "race": "Элийцы",
    "type": "Воин",
    "species": "Страж",
    "name": "Анбу",
    "level": "50"
},{
    "race": "Асмодиане",
    "type": "Маг",
    "species": "Волшебник",
    "name": "Флора",
    "level": "45"
},{
    "race": "Элийцы",
    "type": "Следопыт",
    "species": "Стрелок",
    "name": "Варн",
    "level": "75"
}]`;


2. Самостоятельно разберитесь, что за формат данных XML и чем он отличается от JSON? Приведите пример, как один и тот же объект собачки с картинки ниже будет выглядеть в JSON и в XML?

XML
- XML - это язык разметки, а не язык программирования, в котором существуют теги для определения элементов.
- Данные XML хранятся в виде древовидной структуры. 
- Может выполнять обработку и форматирование документов и объектов.
- Долгий и медленный анализ, ведущий к медленной передаче данных.
- Поддерживает пространства имен, комментарии и метаданные.
- Размер документа большой, а с большими файлами структура тегов делает его огромным и сложным для чтения.
- Не поддерживает массив напрямую. Чтобы иметь возможность использовать массив, нужно добавить теги для каждого элемента.
- Поддерживает множество сложных типов данных, включая диаграммы, изображения и другие типы данных.
- XML поддерживает кодировки UTF-8 и UTF-16.

JSON
- JSON - это текстовый формат, написанный на JavaScript.
- Данные хранятся в виде карты с парами ключ-значение. 
- JSON не делает никакой обработки или вычисления.
- Очень быстрый, поскольку размер файла значительно меньше, более быстрый синтаксический анализ с помощью механизма JavaScript и более быстрая передача данных
- Нет поддержки пространства имен, добавления комментариев или написания метаданных.
- Компактный и легкий для чтения, без лишних или пустых тегов, что делает файл простым.
- JSON поддерживает: строки, числа, массивы и объекты.
- JSON поддерживает кодировки UTF и ASCII.

Пример с картинки:
JSON
{
    "dog": [{
    "breed": "Beagle",
    "size": "large",
    "colour": "orange",
    "age": "6 years",
}]
}

XML
<?xml version="1.0" encoding="UTF-8"?>
<dog>
<breed>Beagle</breed>
<size>large</size>
<colour>orange</colour>
<age>6 years</age>
</dog>


3. Что такое сериализация и десериализация (парсинг)? В каких ситуациях они нужны?

Сериализация — это преобразование объекта или дерева объектов в какой-либо формат с тем, чтобы потом эти объекты можно было восстановить из этого формата. 

Если объект сериализуется в текстовую строку, то тут могут быть разные форматы, включая XML и JSON. Последний для этой цели наиболее популярен, 
т.к. JSON - это и так представление объекта в том формате, как объект создается в JavaScript. 

Для сериализации объекта javascript в json применяется функция JSON.stringify():

let game = {
    race: "Элийцы",
    type: "Воин",
    species: "Страж",
    name: "Анбу",
    level: 50
};
let serializedGame = JSON.stringify(game);

Процесс, обратный сериализации, называется десереализация. В случае, если другой процесс получает строку JSON, то он должен десереализовать строку в объект.

let parsedGame = JSON.parse(serializedGame);

Десериализовывать данные нужно, например, чтобы придать им читаемый вид, или такой формат, который можно и\или удобно использовать в работе. Сериализовать данные нужно, 
например, для хранения или пересылки. 

Преобразование в JSON для отправки на сервер - это сериализация. И обратно - для использования в приложении - это десериализация.


4. Можно ли обработать ответ от сервера одновременно и как текст, и как JSON?

Нет, нельзя. Мы можем выбрать только один метод чтения ответа. Если мы уже получили ответ с response.text(), тогда response.json() не сработает, так как данные уже были обработаны.


5. В чем особенность асинхронных запросов?

При асинхронных запросах действия и операции выполняются без определенного порядка в фоновом/активном режиме, поэтому веб-приложение не зависает каждый раз, 
когда оно ожидает пользовательское событие.


6. В чем преимущество AJAX-запросов перед старым способом работы с сервером через <form action="имя скрипта на сервере">?

AJAX – это асинхронный JavaScript и XML. Этот термин описывает, как возможно, используя существующие технологии, получать данные с сервера в фоновом режиме и 
использовать их для обновления страницы (без перезагрузки). Основная цель AJAX – это сделать сайты и веб-приложения более удобными, быстрыми и отзывчивыми.

Основные преимущества:

- снижение трафика (из-за уменьшения объёма передаваемых данных между клиентом и сервером);
- уменьшение нагрузки на сервер (не нужно генерировать всю страницу, а только ту часть, которую нужно обновить);
- увеличение быстродействия и отзывчивости (нет необходимости в полной перезагрузки страницы, достаточно обновить содержимое только отдельных блоков);
- повышение интерактивности (с помощью AJAX можно сразу отображать результаты и сделать ресурс более удобным для пользования).


7. Напишите, как будет выглядеть fetch для получения данных вашего пользователя на github? Адрес URL для запроса должен выглядеть так: 
    'https://api.github.com/users/сюда подставьте свой логин с github'

fetch('https://api.github.com/users/YuliaLugovaya')
    .then(response => response.json())
    .then(data => {
        const photo = document.querySelector('.photo');
        photo.src = data.avatar_url;
        const login = document.querySelector('.login');
        login.innerText = data.login;
    })
    .catch(err => console.log(err));
//папка github

8. Самостоятельно разберитесь, что такое SPA?

SPA (Single Page Application) – что-то среднее между сайтом и приложением. Веб-версии Gmail, Facebook, Netflix и Pinterest — это одностраничные приложения.

SPA работает так: когда пользователь открывает страницу, браузер загружает сразу весь код приложения. Но показывает только конкретный модуль — часть сайта, которая нужна пользователю. 
Когда пользователь переходит в другую часть приложения, браузер берёт уже загруженные данные и показывает ему. И, если нужно, динамически подгружает с сервера нужный контент 
без обновления страницы.

Одностраничные приложения чаще всего используют в сервисах, где пользователь проводит на одной странице много времени или совершает с ней какие-то действия, например:
- просматривает почту и отмечает письма как спам;
- пишет посты и комментирует чужие;
- смотрит сериалы;
- разглядывает картинки и собирает их в тематические доски.

SPA может обмениваться данными с сервером без перезагрузки страницы, с помощью ajax-запросов. Благодаря этому наполнение страницы может меняться динамически. 
Например, раньше в социальной сети нужно было перезагрузить страницу, чтобы проверить, нет ли новых сообщений, теперь они появляются автоматически.

Преимущества SPA
- SPA быстрые. Переход между модулями в приложении происходит быстрее: нужные ресурсы уже загружены, нужно просто подставить данные, которые запросил пользователь. 
Часто при этом сервер возвращает не тяжеловесный HTML, а лёгкий JSON или XML.

- SPA гибкие. Раз пользователь всё время работает с одной страницей, проще делать интересные переходы и анимацию элементов. Можно работать с состоянием кнопок, 
вкладок и переключателей. Интерфейс SPA может быть похож на полноценное приложение, а не на простой сайт.

- SPA работают везде. Всё, что нужно для SPA — поддержка JavaScript. Такие сайты хорошо работают и на десктопе, и в вебе, и могут в какой-то мере заменить полноценные 
мобильные приложения.

Недостатки SPA
- Проблемы с SEO. Чтобы корректно собирать аналитику, придётся самостоятельно настроить отслеживание нужных событий.

- Зависимость от интернета. Для запуска веб-приложения нужна связь с сервером, так что в большинстве случаев без интернета не обойтись, как и с обычными сайтами. 
Но если во время первой загрузки браузер получает все данные и больше ничего подгружать не нужно, то можно работать и без интернета.







Практическое задание


1. Делаем базу супергероев Марвел. На основе статьи 
[https://www.ellegirl.ru/articles/vse-o-15-samyih-krutyih-supergeroyah/](https://www.ellegirl.ru/articles/vse-o-15-samyih-krutyih-supergeroyah/) 
составьте JSON с массивом супергероев. Сделайте страничку-галерею, где можно будет просматривать информацию о героях по этим данным.
    Что должна уметь страничка: 
    - показать информацию о героях: их картинки, характеристики, подробное описание
    - поставить герою личную оценку (*сохраняем значения в localStorage*)
    например, 10/10 или 2/10, как рейтинг
(папка marvel)

2. Сделайте простенький сайт, который будет получать данные с сервера - используйте любой открытый API. Это может быть, например, список галактик от NASA или 
список ваших проектов на Github. Или что угодно еще, что вы захотите реализовать. В процессе разработки использовать хотя бы 1 запрос к серверу через команду fetch.
(папка nasa)

3. Найдите еще 1-2 примера открытых API, поэкспериментируйте, сделайте к ним пару запросов напрямую, через строку адреса в браузере. Результат (ответ сервера) 
в виде скриншота отправьте Коту. 
(скриншоты - в слаке)