Неделя 16


Вопросы


1. Какими способами можно объявлять массивы в JS?

a. С помощью квадратных скобок
let items = [];

Можно также сразу создать массив со значениями элементов:
let items = [1, 2, 3];

Каждому элементу массива автоматически присваивается порядковый номер (индекс), по которому к нему можно обратиться. Нумерация элементов идет слева-направо начиная с нуля. 
Можно получить элемент, указав его индекс в квадратных скобках:

let items = [1, 2, 3];
console.log(items[0]); // выведет 1

b. С помощью new Array()
let arr = new Array(1, 2, 3);

Второй способ применяется редко, так как квадратные скобки короче. Кроме того, у него есть особенность: если new Array вызывается с одним аргументом (числом), 
он создаёт массив без элементов, но с заданной длиной. Поэтому, чтобы избежать появления неожиданных ситуаций, обычно используются квадратные скобки.


2. Приведите 3 примера, из тех, которые не были озвучены в материалах, что могло бы быть массивом? 
    
a. let library = ['Граф Монте-Кристо', 'Айвенго', 'Вино из одуванчиков']; //список книг в библиотеке
b. let fields = ['name', 'email', 'password', 'login', 'age']; //поля регистрации
c. let stuffing = ['Вишня', 'Мак', 'Корица']; //начинка для булочек


3. Каким еще способом, кроме pop и shift можно удалять элементы из массивов?

С помощью метода arr.splice(str) Он умеет не только удалять, но и добавлять, заменять элементы. Его синтаксис:

arr.splice(index[, deleteCount, elem1, ..., elemN])

Он начинает с позиции index, удаляет deleteCount элементов и вставляет elem1, ..., elemN на их место. Возвращает массив из удалённых элементов.
Например:
let stuffing = ['Вишня', 'Мак', 'Корица'];
arr.splice(1, 1); // начиная с позиции 1, удалить 1 элемент
console.log(stuffing); // осталось ['Вишня', 'Корица']

Начиная с позиции 1, он убрал 1 элемент.


4. Можно ли пропускать части for? Что получится, если написать for(;;)?

Да, можно, любая часть for может быть пропущена.
Например, пропустить начало, если нам ничего не нужно делать перед стартом цикла.

let i = 0; // объявили переменную со значением
for (;  i < 2;  i++) { // нет необходимости в "начале"
  alert(i); // 0, 1
}

Можно убрать и шаг:
let i = 0;
for (; i < 2;) {
  alert( i++ ); 
}
В таком случае цикл станет аналогичным while (i < 2).

Если написать for(;;), получится бесконечный цикл:
for (;;) {
  // будет выполняться вечно
}


5. Самостоятельно разберитесь, как работает цикл while, и приведите два примера кода с его использованием.

Цикл While - инструкция для повторения кода, пока удовлетворяется какое-то условие. Имеет следующий синтаксис:

while (condition) {
  // "тело цикла"
}
Код из тела цикла выполняется, пока условие condition истинно. То есть, конструкция читается так: «пока истинно условие, делать то, что указано в теле цикла».

Например, цикл ниже выводит i, пока i < 5:

let i = 0;
while (i < 5) { // выводит 0, затем 1, затем 2, затем 3, затем 4
  alert( i );
  i++;
}
Одно выполнение тела цикла называется итерация. Цикл в примере выше совершает пять итераций.

Если бы строка i++ отсутствовала в примере выше, то цикл бы повторялся бесконечно и произошло бы зацикливание. В таком случае приходится завершать программу принудительно.

Ещё один пример – задача из дополнительного задания:
Напишите универсальную программу, которая вычисляет сумму чисел от 1 до n. 

let firstNumber = 1;
let a = firstNumber;
let lastNumber = 10;
let n = lastNumber;

let sum = 0;
  while(a <= n){
    sum = sum + a;
    a++
  }
console.log(sum); //выведет 55


6. Какой получится массив, если создать его вот так - new Array(5)?

Получится массив без элементов, но с заданной длиной.
let arr = new Array(5); 
console.log(arr[0]); // undefined! нет элементов.
console.log(arr.length); // length 5

В таком коде все элементы равны undefined.


7. Как вывести чётные числа от 2 до 10 при помощи цикла for?

for (let i = 2; i <= 10; i++) {
  if (i % 2 !== 0) continue;

  console.log(i); // 2, 4, 6, 8, 10
}

либо 

for (let i = 2; i <= 10; i++) {
  if (i % 2 == 0) {
    console.log(i);
  }
}


8. Каков будет результат выполнения этого кода? Почему?

let arr = ["a", "b"];
arr.push(function() {
  alert( arr );
})
arr[2](); // ?

В данном случае происходит вызов функции arr[2]().
Выведется массив:
a, b, function() {
  alert( arr );
}

Это происходит потому, что push добавляет элементы в конец массива. В данном случае была добавлена функция, и она стала третьим элементом массива arr. 


9. Три основных способа перебора элементов массива?

a. C помощью цикла for (традиционный способ).
for (let i = 0; i < 5; i++) { 
  alert(i);
}

b. С помощью цикла for ... of.
let fruits = ["Яблоко", "Банан", "Арбуз"];
// проходит по значениям
for (let fruit of fruits) {
  alert(fruit);
}

с. С помощью метода перебора forEach(func), который вызывает func для каждого элемента. 
// вызов alert для каждого элемента
["Яблоко", "Банан", "Арбуз"].forEach(alert);

Кроме того, существуют и другие методы, которые можно использовать для перебора, например метод поиска (filter – для фильтрации), методы преобразования массива 
(map - для трансформации массива в массив, reduce - для прохода по массиву с вычислением значения).

Во многих ситуациях использование дополнительных методов позволяет написать код короче и понятнее, чем обычный перебор через for.


10. Как можно выбрать все инпуты из вашей формы регистрации из прошлого ДЗ с помощью querySelector?

document.querySelectorAll(‘input’); // по тегу
либо
document.querySelectorAll(‘.form__field’); // по классу – в моей форме все инпуты имели класс .form__field, этот вариант предпочтительнее


11. Самостоятельно разберитесь, как можно проще всего сделать сортировку в массиве на JS?

Существует много способов – пузырьковая сортировка, шейкерная, четно-нечетная, пирамидальная, быстрая и ещё несколько видов сортировок.

В практическом задании я применила пузырьковую. Это сортировка простыми обменами, обход массива с обменом местами соседних элементов, нарушающих заданный порядок, 
до тех пор, пока массив не будет окончательно отсортирован. В результате первого прохода на последнее место «всплывёт» максимальный элемент. Теперь снова обходим 
неотсортированную часть массива (от первого элемента до предпоследнего) и меняем по пути неотсортированных соседей. 

Отдельно выделила для себя сортировку при помощи метода sort(), который сортирует массив в порядке возрастания, а элементы привязывает к строкам.
Для этого вызывается метод String() для каждого элемента массива, а затем элементы сравниваются как строки.


12. Как можно принудительно остановить выполнение цикла?

Мы можем выйти из цикла в любой момент с помощью оператора break.
Например, следующий код подсчитывает сумму вводимых чисел до тех пор, пока посетитель их вводит, а затем – выдаёт:

let sum = 0;
for(;;) {
  let value = +prompt("Введите число", '');
  if (!value) break;
  sum += value;

}
alert( 'Сумма: ' + sum );

Директива break прекращает выполнение цикла и передаёт управление на строку за его телом, то есть на alert.



Практическое задание


1. Напишите функцию `sumInput()`, которая:
    - Просит пользователя ввести значения, используя текстовое поле `input` и сохраняет их в массив
    - Когда пользователь нажмёт кнопку «Готово»
        - Выводит получившийся массив в отсортированном по возрастанию виде
        - Подсчитывает и возвращает сумму элементов массива 
(папка sumInput)

2. Напишите калькулятор расчета стоимости автомобиля в зависимости от комплектации. 
    - Должен содержать выпадающие списки, чекбоксы, радиокнопки
    - Выбор того или иного элемента должен влиять на результирующую цену 
(папка auto)

3. Задачи с массивами являются одним из часто встречаемых в работе программиста и, как следствие, на собеседованиях. Поэтому давай потренируемся использовать изученные методы.
- 1. Дан массив `['js', 'css', 'html']`. Выведите на экран первый элемент.
- 2. Отфильтруйте массив `[0, 1, false, 2, undefined, '', 3, null]` от нежелательных значений, таких как `false`, `undefined`, пустые строки, `0`, `null` с помощью метода `filter`.  Ожидаемый результат: `[1, 2, 3]`.
- 3. Дан массив `[[1,2], [1,2,3], [1,2,3,4]]`. Найдите индекс массива, длина которого `> 3`. Ожидаемый результат: `2` 
(папка tasks)