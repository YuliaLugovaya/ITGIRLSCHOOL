Неделя 19


Вопросы


1. Чем отличается класс от объекта? Приведите примеры и того, и другого, отличные от указанных в уроке.

Объект - это набор собранных внутри одной переменной свойств и/или функций. Каждое свойство представляет собой пару имя-значение. Класс — это шаблон, 
описывающий свойства и методы, которыми будет обладать любой объект, созданный на основе этого класса. 

Главное отличие: класс - это только структура, а объекты - это уже конкретные переменные с заполненными полями на основе этой структуры.

Например, класс «Предметы в школе» может иметь такие поля: название, учитель, кабинет, количество уроков в неделю. На основе этого класса создается объект – конкретный предмет: 
название: История Беларуси
учитель: Иванова В.В.
кабинет: 25
количество уроков в неделю: 2


2. Приведите примеры объектно-ориентированного подхода в реальной жизни. 
    
Класс «Квартира», его свойства – район, улица, номер дома, номер квартиры, состояние, количество жилых комнат
Объект:
район – Центральный
улица – Первая
номер дома – 1
номер квартиры – 2
состояние – новое
количество жилых комнат – 3

Класс «Семья», его свойства – член семьи, имя, возраст, рост, вес и т.д.
Объект:
член семьи – брат
имя – Иван
возраст – 24
рост – 185
вес - 80
    
Приведите примеры объектно-ориентированного подхода в программировании. 
    
Класс «Форма обратной связи», свойства – имя пользователя, email, текст, дата
Объект:
имя – Анна
email – anna@gmail.com
текст – «Спасибо, вы супер!»
дата – 23.12.2022

Класс «Персонаж компьютерной игры», свойства – раса, тип, вид, имя, уровень
Объект:
раса – Элийцы
тип – Воин
вид – Страж
имя – Анбу
уровень – 50


3. Что такое конструктор? Самостоятельно изучите и напишите, какие бывают виды конструкторов.

Конструктор описывает шаблон, по которому будут создаваться объекты. В основе шаблона лежат свойства и методы, которыми будет обладать объект, 
созданный на основе класса. Для всех встроенных типов данных в JavaScript существуют встроенные функции-конструкторы.

Конструкторы следует вызывать с помощью new. Такой вызов подразумевает создание пустого this в начале и возврат заполненного в конце.

Виды конструкторов: 
a. new function. Имя функции-конструктора должно начинаться с большой буквы. Функция-конструктор должна выполняться только с помощью оператора "new". 

function User(name) {
  this.name = name;
}
let user = new User("Юля");

b. Синтаксис «class». Используется вызов new User() для создания нового объекта со всеми перечисленными методами. При этом автоматически вызывается метод constructor(), 
в нём мы можем инициализировать объект.

class User {
  constructor (name) {
    this.name = name;
  }
}
let user = new User("Юля");


4. Что выведет код? Почему именно так?

Код выведет следующее:
bike() // undefined
obj1.bike() // pomidor
obj2.bike() // site

Почему именно так:
Функция bike() – это обычная функция, в которой не задано никакое значение, поэтому выведется undefined. 

Переменная var name игнорируется, поскольку является простой строкой, а не объектом со свойствами, на которые может ссылаться this.

obj1.bike() // pomidor
obj2.bike() // site
Здесь значения this.name вызываются без проблем, потому что происходит обращение к свойствам объектов: вызывается свойство bike, которое содержит в себе ссылку на функцию, 
и через эту функцию происходит вызов в консоль объектов со значением свойства name.


5. Чем статические свойства и методы отличаются от нестатических? В каких ситуациях они применяются?

Статические свойства и методы, в отличие от нестатических, не привязаны к конкретному объекту и могут существовать без создания объекта и слова new. 
Статические методы и свойства обозначаются в классе ключевым словом static. 

Чаще всего они используются для реализации функций, принадлежащих классу, но не к каким-то конкретным его объектам. Статические методы удобно использовать для создания 
классов-калькуляторов, классов-утилит, классов-помощников для работы с какими-то другими классами.


6. Самостоятельно изучите, что такое геттеры и сеттеры, приведите пример класса с их использованием.

Геттеры и сеттеры – это методы свойств-аксессоров (функций, которые используются для присвоения и получения значения, но во внешнем коде они выглядят как обычные свойства объекта).

Метод геттер предназначен для чтения, а сеттер – для записи. При литеральном объявлении объекта они обозначаются get и set.

class Location {
    constructor(town, country){
        this.town = town,
        this.country = country
    }
    get nameTown(){
        return this.town
    }
    set nameTown(nameTown) {
        this.town = nameTown
    }
}
let result = new Location('', 'Беларусь');
result.nameTown = 'Гомель';
console.log(result.town) //Гомель
console.log(result.country) //Беларусь
result.nameTown = 'Минск';
console.log(result.town) //Минск


7. Что выведет код? Почему именно так?

console.log(typeof member) // object
На основе класса Person был создан объект – константа member, поэтому в консоли выведется тип Объект.

8. Что выведет код? Почему именно так?

Выведет в консоли:
console.log(person) // { name: 'Valera', age: 23 }

Если нужно было добавить город проживания, то следовало обратиться напрямую к person через точку, не создавая let city:
const person = {
  name: "Valera",
  age: 23
}
person.city = 'Amsterdam';
console.log(person) // // { name: 'Valera', age: 23,  city: 'Amsterdam';}






Практическое задание


1. Создайте класс Работник, который будет иметь следующие свойства: name (имя), surname (фамилия), rate (ставка за день работы), days (количество отработанных дней). 
Также класс должен иметь метод getSalary(), который будет выводить зарплату работника. Зарплата - это произведение (умножение) ставки rate на количество отработанных дней days.
(папка worker)

2. Напишите класс Cat со свойствами, соответствующими полям вашего опросника (например, кличка, корм и пр.), и по нажатию на кнопку "Ок" создайте экземпляр этого класса, 
заполнив его свойства ответами из опросника. В этом классе будут только свойства и конструктор, без методов. Выведите результат (заполненный объект класса Cat) в консоль 
при помощи console.log.
(папка cats)

3. Создайте класс Калькулятор, который будет содержать 4 статических метода - Сложение, Умножение, Вычитание и Деление. Доработайте свою страничку с калькулятором, 
чтобы в ней использовались методы этого класса.
(папка calculator)

4. Реализуйте класс `Валидатор`, который будет проверять строки. К примеру, у него будет метод `isEmail`, который параметром принимает строку и проверяет, является ли она 
корректным емейлом или нет. Если является - возвращает true, если не является - то false. Кроме того, класс будет иметь следующие методы: метод `isDomain` для проверки домена, 
метод `isDate` для проверки даты и метод `isPhone` для проверки телефона. Сделайте 2 версии этого класса - стандартную и статическую.
(папка validator)