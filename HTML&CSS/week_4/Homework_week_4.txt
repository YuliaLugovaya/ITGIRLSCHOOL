Неделя 4


Вопросы


1. Какими способами можно подключать CSS-стили? Найдите сами еще один способ, не указанный в уроке
a. Внутренние стили. С помощью атрибута style (когда нужно что-то быстро протестировать):
	<span style="color: 'orange' ">Текст</span>
	b. Глобальные стили. С помощью тега <style> в head. Этот способ более поддерживаемый, так стили легче находить и при изменять:
	<head>
	<style>
	h1 {
	 color: #000000;
	}
	</style>
	</head>
	c. Связанные стили. С помощью тега <link> можно подключить стили, которые находятся в отдельном файле style.css. Самый оптимальный способ: одни и те же стили можно 
использовать на разных страницах в случае, если их больше одной.
	<head>
	 <link rel="stylesheet" href="/style.css">
	 </head>
	d. Импорт CSS. В стилевую таблицу можно импортировать содержимое CSS-файла с помощью команды @import. Этот метод допускается использовать совместно со связанными или 
глобальными стилями, но не с внутренними стилями.
	Импорт в таблицу глобальных стилей файла header.css, который расположен в папке style:
	<style>
	  @import url ("style/header.css");
	  H1 {
	   color: green;
	  }
	 </style>
	Импорт в файл со связанными стилями:
	@import "/style/header.css ";

2. Зачем нужен Normalize.css?
Это отдельный CSS-файл, который обеспечивает для HTML-элементов лучшую кроссбраузерность в стилях по умолчанию.
	Normalize.css:
	- сохраняет полезные настройки браузера, не стирая их полностью;
	- нормализует стили для большого круга HTML-элементов;
	- корректирует ошибки и главные несоответствия браузера;
	- совершенствует удобство и простоту использования незаметными улучшениями;
	- объясняет код, используя комментарии и детальную документацию.

3. Что такое CSS-директивы?
Это специальные конструкции, правила, которые начинаются с символа @. Директивы сами по себе ничего не стилизуют, но они чаще всего влияют на весь документ. Например, директива
	@charset определяет кодировку, используемую браузером;
	@import сообщает таблице стилей о необходимости запросить и включить в себя внешний CSS-файл;
	@font-face позволяет подключать на страницу нестандартные шрифты, которые потом можно использовать в свойстве font-family;
	@media активирует или деактивирует CSS правила (адаптивная вёрстка).

4. В чем разница между margin и padding?
margin создает внешние отступы от всего элемента, то есть определяет пространство за пределами (снаружи) элемента, расстояние от одного блока до другого.
padding создает внутренние отступы от содержимого до края блока (содержимое элемента удаляется от его внутренних границ), то есть padding определяет пространство внутри элемента.

5. Как в CSS определяются приоритеты? Какое из свойств будет приоритетнее - #link .main или span
#login?
Приоритеты определяются согласно системе приоритетов: в конечном итоге применяется тот стиль, который исходит от источника с более высоким приоритетом.
Чтобы разобраться в том, какие источники являются более значимыми, а какие – менее, нужно разбить селекторы на 4 группы, где указан вес (значимость) каждого селектора. 
Чем больше вес, тем выше приоритет.
Селектор тега:
 1
   Селектор класса:
 10
   Селектор ID:
 100
   Inline-стиль:
 1000
Когда селектор состоит из нескольких других селекторов, необходимо посчитать их общий вес: за каждый селектор добавляется 1 в соответствующую ячейку. 
В остальных ячейках стоят нули. Чтобы получить общий вес, необходимо «склеить» все числа в ячейках.
Посчитаем приоритетность свойств #link .main или span #login.
	
	#link .main – 0110, где (слева направо):
	0 – встроенный Inline-стиль
	1 – селектор идентификатора (#link)
	1 – селектор класса (.main)
	0 – селектор тега
	
	span #login – 0101, где:
	0 – встроенный Inline-стиль
	1 – селектор идентификатора (#login)
	0 – селектор класса
	1 – селектор тега (span)
	
	Следовательно, #link .main будет приоритетнее (110>101)

6. В чем разница между CSS1 и CSS3?
CSS3 имеет множество мощных функций, которые делают веб-дизайн проще, легче и гибче, а также содержит новый набор инструментов с расширенными селекторами, которые позволяют 
выбирать более конкретные элементы для стилизации.
	- Адаптивность. CSS - базовая версия и не поддерживает адаптивный дизайн, в отличие от CSS3.
	- Скорость. Старая версия CSS медленнее, чем CSS3.
	- Выравнивание. CSS3 имеет много функций выравнивания с помощью инструмента для изменения размеров ячеек. CSS не имеет какого-либо инструмента для определения размера блоков.
	- Переходы и анимация. В CSS3 элементы можно перемещать по экрану. Элементы также смогут менять свой размер и цвет. Есть еще функция, называемая «transitions», которая 
позволяет управлять скоростью анимации при переходе от одного значения свойства к другому. CSS не предоставляет 3D анимацию и преобразования.
	- Цвет. CSS предоставляет базовую цветовую схему и стандартные цвета в шестнадцатеричном формате. CSS3 поддерживает цвета RGBA, HSLA, HSL и градиент. Градиенты могут быть 
линейными или радиальными и создавать визуальные эффекты, которые так же визуально богаты, как градиенты в других технологиях, таких как SVG. Наиболее значительным изменением является 
также  то, что теперь можно объявлять полупрозрачные цвета.
	- Многоколонные текстовые блоки могут быть определены в CSS3. CSS поддерживает только отдельные текстовые блоки.
	- Селекторы. CSS3 предлагает новый набор инструментов с расширенными селекторами, которые позволяют выбирать более конкретные элементы для стилизации, устраняя необходимость 
в тех произвольных идентификаторах и классах.
	- Скругление границ блока. Свойство CSS «border-radius» определяет закругленные углы любого элемента, что позволяет легко использовать закругленные углы в элементах дизайна. 
Свойство «box shadow» позволяет добавлять тени к элементам.
	- Форматирование текста. Новое свойство «text shadow» позволяет добавлять тени к отдельным символам в текстовых узлах.
	- Модули. Основное различие между CSS и CSS3 заключается в том, что в CSS3 есть модули - файлы CSS, где все имена классов и имена анимации по умолчанию имеют локальную 
область видимости.

7. Что такое псевдоклассы? А псевдоэлементы?
Псевдокласс — это селектор, который выбирает элементы, находящиеся в специфическом состоянии. Например, они являются первым элементом своего типа, или на них наведён указатель мыши. 
Псевдоклассы определяют динамическое состояние элементов, которое изменяется с помощью действий пользователя, а также положение в дереве документа.
	Примером такого состояния служит текстовая ссылка, которая меняет свой цвет при наведении на неё курсора мыши. При использовании псевдоклассов браузер не перегружает текущий 
документ, поэтому с помощью псевдоклассов можно получить разные динамические эффекты на странице.
	Псевдоклассы имеют вид ключевых слов, которые начинаются с двоеточия
	:hover
	:only-child
	
	Псевдоэлементы похожи на псевдоклассы, однако они действуют так, как если добавить в разметку целый новый HTML-элемент, а не применять класс к существующим элементам. 
Псевдоэлементы начинаются с двойного двоеточия ::
	Например, если нужно выбрать первую строку абзаца, можно обернуть её в <span> и использовать селектор элемента; однако это может не сработать, если количество слов в обертке 
будет больше или меньше ширины родительского элемента.
	Селектор псевдоэлемента ::first-line сделает это наверняка — если количество слов увеличивается или уменьшается, он всё равно будет выбирать только первую строку.

8. Изучите статью про "плохие" теги и пришлите список тегов, которые нежелательно использовать
<u> - нежелательно иметь в тексте подчеркивания, не связанные со ссылками
	<center> (замена - свойство CSS text-align)
	<layer> (замена -  тег <div>)
	<blink>, <marquee> -  ограниченная поддержка
	<font> (замена - свойства CSS)
	<b> (замена – strong)
	<i> (замена – em)
	<big> (замена – для заголовков теги h1-h6, а для визуального выделения - свойство CSS font-size)
	<small> (замена - использовать свойство CSS font-size)
	<hr> (замена - свойство CSS border-top или border-bottom, либо тег изображения)

9. Как можно подключать шрифты локально?
a. С помощью Google Fonts. На сайте https://fonts.google.com  необходимо выбрать шрифт и добавить одно или несколько нужных начертаний, а затем вставить в <head> ссылку, 
которую сгенерирует Google Fonts во вкладке Embed. Теперь его можно использовать в свойстве font-family.
	b. С помощью @font-face. Это способ, при котором файлы со шрифтами хранятся вместе с остальными ресурсами сайта. В отдельную директорию в корне проекта (fonts) 
следует поместить файлы для каждого начертания в нужных форматах (.woff и .woff2). Шрифты можно скачать на различных ресурсах.
	После того, как шрифты добавлены в проект, их нужно подключить в CSS-файле. Для этого используется правило @font-face. Для каждого начертания нужно отдельное правило.

10. Почему не стоит использовать сокращенную запись без необходимости? И если все же использовать, как это делать правильно?
Сокращенная запись свойств хоть и сокращает объём кода, но может принести ряд проблем. При такой форме записи те свойства, которые явно не указаны, получают значения по умолчанию, 
что может изменить ранее назначенные свойства.
	Чтобы избежать подобной путаницы, следует, во-первых, группировать свойства по смыслу. Это позволит быстрее находить ошибки. А во-вторых, если нужно переопределить значения 
ранее заданных свойств, не следует использовать сокращённую запись.

11.  Разберитесь самостоятельно, как сделать анимацию.
Анимация создается с помощью двух свойств:
	- @keyframes – задаем внешний вид анимации
	- animation – задаем, как должна протекать анимация (продолжительность, ускорение и т.д.).
	В практическом домашнем задании я сделала анимированные кнопки.


Практическое задание


1. Сверстайте полностью страницу по макету из п.3 прошлого домашнего задания 
- папка Aperture.

2. Закрепите навыки работы с селекторами в забавной игре https://flukeout.github.io/ - выполнила.