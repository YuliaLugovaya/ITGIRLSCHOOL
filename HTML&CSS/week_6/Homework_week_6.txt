Неделя 6


Вопросы


1. Что за единица измерения - fr?
fr - это гибкая единица измерения, которая рассчитывается исходя из количества доступного пространства в grid-контейнере. Этот метод может помочь сэкономить время на расчет процентов.
Например, задав список треков 1fr 1fr 1fr, доступное пространство делится на 3 и распределяется поровну между тремя колонками. Если указать список треков 3fr 1fr, доступное пространство 
делится на 4, из которых 3 части отходят первой колонке, а одна часть - второй колонке.
Можно объединять единицы измерения fr с фиксированными размерами. Например, grid-контейнер может состоять из двух колонок с фиксированной шириной по краям и гибкой центральной областью 
в fr.

2. Как можно задать грид с 5 колонками шириной по 20%? Минимум 2 способа.
Создать grid контейнер
	.container: {
	    display: grid
	}
Способ 1. Задать ширину колонок с помощью fr
	grid-template-columns: repeat(5, 1fr);
Способ 2. С помощью процентов:
	grid-template-columns: repeat(5, 20%);
Способ 3. С помощью vw
	grid-template-columns: repeat(5, 20vw);

3. Самостоятельно разберитесь, что такое auto-fill и auto-fit?
Это способы создания гибких гридов для управления свободным местом. Они используются внутри функции repeat, обычно с функцией minmax:
	grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
	auto-fill и auto-fit заменяют собой числа в repeat и вычисляют максимально возможное число колонок в контейнере. Основное различие между ними – это то, как они справляются 
с лишним пространством в строке.
	auto-fill пытается поместить наибольшее количество повторяющихся элементов в колонку, сколько их может уместиться. Когда места для добавления другого элемента не хватает, 
следующий элемент будет размещён на следующей строке, а место, которое он не смог заполнить, останется пустым.
	auto-fit ведёт себя почти так же, как auto-fill, но при использовании этого способа любая пустая область будет схлопываться и растягивать элементы в этой строке, напоминая флексы.

4. Как сделать такую табличку? Параметры: первая колонка шириной 100 пикселей, вторая 30%. Первая строчка высотой 200 пикселей, вторая строчка 100 пикселей.
Это табличка с тремя колонками и двумя строчками. С помощью grid контейнера нужно задать известные данные, а третьей колонке можно поставить 1fr для "резиновости".
	Код будет таким:
.container {
	   display: grid;
	   grid-template-columns: 100px 30% 1fr;
	   grid-template-rows: 200px 100px;
	   gap: 20px;}

5. Как сделать такое выравнивание в грид-контейнере?
Применить свойство justify-content: space-between.
.container {
  display: grid;
  grid-template-columns: 200px 200px 200px;
  justify-content: space-between;
  height: 100vh;
}
Кроме того, если нужно задать для колонок ширину 1fr, можно отрегулировать положение grid-элементов отдельно с помощью задания ширины каждому элементу и свойства justify-self:
	для первой колонки значение - start (по умолчанию)
	для второй - center
	для третьей - end

6. Что такое и как задается grid area?
grid area - это пространство внутри grid контейнера, в которое может быть помещен один или больше grid элементов. Этот элемент может состоять из одной или более grid ячеек.
	Свойство grid-area является сокращенным свойством для grid-row-start, grid-column-start, grid-row-end и grid-column-end, определяя размер и расположение элемента сетки. 
Можно задавать при помощи порядковых номеров линий:
	grid-area: 2 / 1 / 4 / 3;
	Другой способ определить грид-область, - задать ей имя и определить местоположение как значения свойства grid-template-areas. Можно выбрать для грид-области любое имя. 
Определив имена, можно начинать создание макета. И вместо того, чтобы расположить элементы с помощью номеров линий, заданных для самих элементов, создается весь макет в грид-контейнере:
	grid-template-areas:
	     "header header header header "
	     "aside aside main main"
	     "footer footer footer footer ";
	Если используется этот метод, то нам не нужно задавать что-то отдельно для грид-элементов, все задается для грид-контейнера. Весь макет описывается значением свойства 
grid-template-areas.

7. Приведите пример использования grid-template-areas
С помощью grid-template-areas легко можно разделить контейнер на области, и все элементы «разложить» по этим областям так, как нам нужно. На флексах для этого пришлось бы делать 
несколько вложенных обёрток. При использовании Grid всё это лежит в одном контейнере. При этом описание областей словами в CSS даёт представление о том, как результат будет выглядеть 
в браузере.
Для примера - расставить элементы в определенном порядке, включая большой блок и маленькие: (отредактировано) 
.container {
	   display: grid;
	   grid-template-areas:
	   "block_1 block_1 block_2"
	   "block_1 block_1 block_3"
	   "block_6 block_5 block_4";}
Код может быть таким (отправила в слак).

8. Каким свойством можно задать такое поведение элементов?
http://css-live.ru/Primer/grid1/1-MyO6enrNZEL9HSzYmdA8VA.gif
С помощью значения auto-fit и функции minmax: пустая область схлопывается и растягивает элементы в строке, например:
	display: grid;
	   grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
	
Минимальное и максимальное значение задано одновременно: в моем примере колонки будут минимум в 250px и максимум в 1fr. И когда есть место для дополнительных колонок, 
но нет элементов, которые можно вставить эти колонки, то auto-fit сделает ширину пустых колонок равную нулю, а браузер разделит оставшееся место поровну между ними, потому что 
максимальная ширина задана в fr.

9. Самостоятельно разберитесь, как работают именованные линии? Есть ли какие-то рекомендованные правила наименований? Если да, то какие?
Как работают именованные линии
Использование именования линий треков позволяет размещать элементы по имени, а не по номеру. Имена задаются внутри квадратных скобок в списке треков. Назвав линии, можно использовать 
их имена вместо номеров при позиционировании элементов на сетке. Имя может быть любым, кроме ключевого слова span.
	grid-template-rows: [header-start] 1fr [header-end];
Правила наименований
Рекомендуется именовать линии с использованием суффикса -start для начальных линий и суффикса -end для конечных. В итоге должно получиться header-start и header-end или footer-start 
и footer-end.
	Линии могут иметь несколько имён, ведь часто конечная линия одной части сетки и начальная линия другой части совпадают. Задать линии несколько имён можно через пробел внутри 
квадратных скобок.
	 grid-template-rows: [header-start] 1fr [header-end];
	 grid-template-columns: [full-start asade-start] 1fr 1fr [asade-end main-start] 1fr 2fr [main-end full-end];
	Кроме того, не обязательно называть каждую отдельную линию сетки. Всегда остаются доступны номера линий, которые можно использовать помимо имён.

10. Как проще всего задать 12 одинаковых по ширине колонок?
С помощью единицы измерения fr.
	display: grid;
	   grid-template-columns: repeat(12, 1fr);



Практическое задание


1. Пройти игру https://cssgridgarden.com/
- выполнила.

2. Сверстать страничку с помощью CSS Grid, чтобы получить такой результат и прислать ссылку на github
- папка css-grid_page.

3. Сделать НОВУЮ страницу из макета Figma на базе технологии CSS Grid
- папка Cootels.