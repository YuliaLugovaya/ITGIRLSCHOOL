Неделя 7


Вопросы


1. Как сделать так, чтобы при просмотре на телефоне текст стал читаемым, а картинка - большой?
Чтобы мобильные браузеры не изменяли автоматически размер страниц сайта, нужно использовать специальный тег <meta> с атрибутом name="viewport". В данном теге допускается устанавливать 
определенное значение для параметров width и initial-scale:
<meta name="viewport" content="width=device-width, initial-scale=1">
initial-scale=1 говорит о том, что размер страницы в браузере будет равен 100% величины области просмотра, то есть 1 пиксель окна просмотра будет равен 1 пикселю CSS.
width=device-width говорит о том, что ширина страницы будет равна 100% ширины окна любого браузера. То есть, ширина страницы сайта соответствует ширине устройства, поэтому её 
не надо масштабировать.
При использовании генерации страницы через !+Tab в Emmet этот метатег добавляется автоматически.

2. В чём разница между отзывчивым и адаптивным веб-дизайном?
Responsive Design (RWD) — отзывчивый дизайн — это проектирование сайта с определенными значениями свойств, например, гибкая сетка макета, которые позволяют одному макету работать 
на разных устройствах. Это универсальный дизайн, растягивающий или сужающий контент в зависимости от экрана.
Adaptive Design (AWD) — адаптивный дизайн, или динамический показ — проектирование сайта с условиями, которые изменяются в зависимости от устройства, базируясь на нескольких макетах 
фиксированной ширины. Это оптимизированные, уникальные шаблоны для каждого типа устройства.
То есть, основное отличие между этими приёмами: отзывчивый дизайн — один макет для всех устройств, адаптивный дизайн — один макет для каждого вида устройства.

3. Какие величины лучше использовать для шрифтов в гибком дизайне?
Для шрифтов в гибком дизайне следует рассматривать относительные единицы. В первую очередь - em или rem. Они дают нам адаптируемость, позволяя определять размеры элемента на основе 
размера шрифта, определенного выше в разметке.
Основное различие между em и rem:
em определяется относительно размера текущего шрифта родительского элемента,
rem - относительно размера шрифта корневого элемента (элемента <html>).
Элементы, размер которых задан в rem, не зависят друг от друга и от контекста – и этим похожи на px, а с другой стороны, они все заданы относительно размера шрифта <html>.
Кроме того, есть ещё возможные варианты:
- проценты % – определяются относительно такого же свойства родителя (как правило, но не всегда). Разницы между em и % здесь нет, так как при задании font-size в процентах, 
эти проценты берутся от font-size родителя, то есть ведут себя так же, как и em;
- vw, vh, vmin, vmax – относительно размера экрана. Эти значения были созданы, в первую очередь, для поддержки мобильных устройств. Их основное преимущество в том, что любые размеры, 
которые в них заданы, автоматически масштабируются при изменении размеров окна.
Итого получается следующее:
em - от текущего шрифта
% - от родительской ширины
rem - от стиля html
vw – 1% ширины окна
vh – 1% высоты окна
vmin – наименьшее из (vw, vh)
vmax – наибольшее из (vw, vh)
Пиксели (px) – это самая базовая, абсолютная и окончательная единица измерения. Главное достоинство пикселя – чёткость и понятность. Но у него есть весомые недостатки перед 
относительными единицами: эти единицы измерения «мощнее», они позволяют устанавливать соотношения между различными размерами. Для шрифтов пиксели лучше не использовать.

4. Какой вид верстки использован на этой картинке? К какой категории шаблонов он относится?
Это отзывчивая верстка, шаблон Layout shifter (Двигающийся макет) - наиболее отзывчивый, поскольку в нем предусмотрено наличие нескольких контрольных точек для экранов различной ширины. 
Вместо перерасчета дерева отрисовки и размещения столбцов друг под другом перемещается контент.

5. Как задать стили для экранов шириной от 800 до 1200 пикселей?
Использовать медиа запрос:
@media screen and (min-width: 800px) and (max-width: 1200px) {
/* CSS-стили */;
}

6. Приведите минимум 2 примера как подключать медиазапросы?
a. Внутри таблицы стилей style.css:
@media (max-width: 1200px) {
/* CSS-стили */;
}
b. С помощью html
<link rel="stylesheet" media="screen and (color)" href="example.css">
c. В коде страницы:
<style>
@media (max-width: 1200px) {
 /* CSS-стили */;
</style>
d. С помощью правила @import внутри элемента <style> или внешней таблицы стилей:
@import url(color.css) screen and (color);

7. Как можно задавать гибкие изображения?
a. Использовать max-width в CSS:
image {
max-width: 100%;
}
Если свойство max-width установлено на 100%, изображение будет уменьшаться, если это необходимо, но никогда не будет увеличиваться до размера, превышающего его исходный размер. 
Максимальная ширина изображения равняется 100% от ширины экрана или окна браузера, поэтому чем меньше ширина, тем меньше картинка.
b. HTML элемент <picture> позволяет определять разные изображения для разных размеров окна браузера.
<picture>
         <source srcset="img_smallstar.jpg" media="(max-width: 767px)">
         <source srcset="img_star.jpg" media="(max-width: 1023px)">
       <source srcset="star.jpg"> <img src="img_smallstar.jpg" alt="Star">
</picture>
c. Свойство object-fit
Это свойство определяет, как элемент вроде img подстраивается под доступные ширину и высоту своего содержимого в случае, когда для элемента заданы ширина и высота, отличные от его 
собственных размеров. С object-fit можно приказать содержимому заполнить этот бокс различными способами: свойство масштабирует, обрезает или растягивает содержимое замещаемых элементов.
Например, при значении cover содержимое элемента обрезается, выравниваясь по центру с сохранением пропорций таким образом, чтобы полностью заполнить область контейнера.
Кроме того, свойство object-position используется в сочетании с object-fit и задаёт положение содержимого замещаемого элемента внутри контейнера относительно координатных осей X и Y. 
Позиционирование по горизонтали и вертикали может быть задано с помощью пары ключевых слов, например, left top, right center, center bottom и т.д.
d. Свойство position
Это решение будет работать, если обернуть изображение в дополнительный контейнер. Пропорции сохраняются с помощью padding, заданных в процентах, а картинка абсолютно позиционируется.
.wrapper {
 position: relative;
 padding-top: 56.25%;
}
img {
 position: absolute;
 left: 0;
 top: 0;
 width: 100%;
 height: auto;
}

8. Как задать стили только для landscape поворота экрана? И что вообще такое landscape и чем он отличается от portrait?
Чтобы задать стили только для landscape, в @media нужно использовать функцию orientation: landscape:
@media (orientation: landscape) {
 #background-image {
background: url(image_nature.jpg) no-repeat; }
}
landscape и portrait – это значения функции orientation, которая проверяет то, в каком режиме отображается страница.
landscape (альбомный) - это режим, в котором ширина viewport больше её высоты.
portrait (портретный) - это режим, в котором, наоборот, высота viewport больше ширины.

9. Назовите минимум 3 способа как можно тестировать, как выглядит сайт при разных размерах экранов?
Способ 1. Использовать предоставляемый разработчиками браузеров инструментарий.
Например, в Chrome консоль разработчика – Developer Tools. Открыть можно несколькими способами:
- f12,
- правая кнопка мыши – Просмотреть код
- Дополнительные инструменты – Инструменты разработчика
- Ctrl+Shift+I
Внутри консоли во вкладке Responsive можно выбирать различные типы устройств или тестировать отображение в произвольных размерах.
Способ 2. Использовать онлайн-сервисы для проверки адаптива
Например, BrowserStack позволяет протестировать сайт не только на адаптивность, но и на кроссбраузерность.
Сайт http://mattkersley.com/responsive/ позволяет проверить сайт с точки зрения отзывчивости.
Способ 3. Использовать инструменты от поисковых систем для проверки адаптива
При наличии доступа к сервису веб-мастера можно тестировать сайт и с его помощью, поскольку там отражаются наиболее актуальные требования поисковых систем.
Например, подходят такие сервисы, как Google Mobile Friendly, Mobile Friendly – Яндекс.Вебмастер.
Минусы использования: нельзя посмотреть, как выглядит веб-ресурс в разных разрешениях. Данные сервисы лучше всего подходят для проверки удобства использования мобильных девайсов и 
фрагментов кода.
Способ 4. Узнать, какими браузерами пользуются посетители сайта.
Для начала нужно зайти в систему сбора статистики Google Analytics/Яндекс.Метрики – в соответствующем разделе представлен перечень браузеров и количество посещений. Но сайт при этом 
должен быть подключен к этим системам.
После того как будет определено, с каких браузеров осуществляются входы, необходимо поочередно открывать в каждом сайт и проверять, корректно ли отображение, отсутствуют ли баги.

10. Самостоятельно изучите, как можно подключить несколько картинок разных размеров через один тег <img>?
Существуют два атрибута (srcset and sizes), позволяющие добавить дополнительные изображения с пометками, чтобы браузер выбрал подходящее.
Пример:
<img srcset="nature-480w.jpg 480w, nature-800w.jpg 800w"sizes="(max-width: 480px) 440px, 800px"src="nature-800w.jpg" alt="Nature">
srcset включает названия изображений, среди которых браузер выберет нужное и их размеры. Порядок следующий:
- название изображения (nature-480w.jpg.)
- пробел
- актуальная ширина картинки в пикселях (480w); здесь используется w вместо px, это настоящая ширина изображения, которая может быть просмотрена в свойствах картинки на компьютере.
- sizes определяет перечень медиавыражений (например, ширину экрана) и указывает предпочтительную ширину изображения, когда определённое медиавыражение истинно. В данном примере перед 
каждой запятой пишем:
- медиа-условие (max-width:480px) — описывает возможное состояние экрана. В этом случае, мы говорим "когда viewport width меньше или равен 480 пикселям".
- пробел
- ширину, занимаемую изображением, когда медиа-условие истинно - 440px. Для ширины слота можно указать абсолютные значения (px, em) или значение относительно окна просмотра (vw), 
но не проценты.
- у последнего слота нет медиа-условия — это значение по умолчанию, которое станет актуальным, если ни одно из предыдущих медиа-условий не будет истинно.
Итак, с такими атрибутами, браузер сделает следующее:
1. Посмотрит на ширину экрана устройства.
2. Попытается определить подходящее медиа-условие из списка в атрибуте sizes.
3. Посмотрит на размер слота к этому медиавыражению.
4. Загрузит изображение из списка из srcset, которое имеет тот же размер, что и выбранный слот, или, если такого нет, то первое изображение, которое больше размера выбранного слота.
Если браузер с viewport width 480px загрузит страницу, медиа-условие (max-width: 480px) будет истинно, следовательно, будет выбран слот 440px, тогда будет загружено изображение 
nature-480w.jpg, так как свойство ширины (480w) наиболее близко значение 440px. Старые браузеры, не поддерживающие эти возможности, просто проигнорируют их и возьмут изображение 
по адресу из атрибута src.


Практическое задание


1. Доработать уже привычный нам макет с учетом знаний об адаптивности (2 версии - респонсивную и адаптивную)
- папка css-grid_page(adaptive).

2. Доработать макет своей страницы из прошлой недели с учетом знаний об адаптивности любым из способов, предложенных выше.
- папка Cootels из week_6.

3. Сделать пример из статьи https://habr.com/ru/company/edison/blog/344878/
Отчетность - код и видео работы страницы при изменении размера
- папка auto-fit.